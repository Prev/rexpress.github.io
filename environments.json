{"c++": {"name": "c++", "info": {"website": "https://isocpp.org/", "icon": {"type": "devicon", "value": "cplusplus"}, "title": "C++", "description": "C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation."}, "children": {"c++11-match": {"name": "c++11-match", "parent": {"name": "c++", "info": {"website": "https://isocpp.org/", "icon": {"type": "devicon", "value": "cplusplus"}, "title": "C++", "description": "C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation."}}, "info": {"properties": [{"type": "hidden", "name": "test_type", "value": "match"}, {"type": "string", "name": "regex", "example": "([A-Za-z]+)", "help": "Regular expression.", "required": true}, {"type": "list", "name": "syntax_type", "help": "Grammer of regex. These member constants are aliases of the homonym constants under the std::regex_constants namespace.", "list": {"ECMAScript": "ECMAScript", "basic": "basic", "extended": "extended", "grep": "grep", "egrep": "egrep", "awk": "awk"}, "default": "ECMAScript"}, {"type": "list", "name": "test_subtype", "help": "'Match' is only test string is matched. 'Extract' type shows captured group.", "list": {"match": "Match", "extract": "Extract"}, "default": "match"}, {"type": "boolean", "name": "icase", "help": "Regular expressions match without regard to case."}, {"type": "boolean", "name": "nosubs", "help": "The match_results structure will not contain sub-expression matches."}, {"type": "boolean", "name": "optimize", "help": "Matching efficiency is preferred over efficiency constructing regex objects."}, {"type": "boolean", "name": "collate", "help": "Character ranges, like \"[a-b]\", are affected by locale."}, {"type": "boolean", "name": "match_not_bol", "help": "The first character is not considered a beginning of line (\"^\" does not match)."}, {"type": "boolean", "name": "match_not_eol", "help": "The last character is not considered an end of line (\"$\" does not match)."}, {"type": "boolean", "name": "match_not_bow", "help": "The escape sequence \"\\b\" does not match as a beginning-of-word."}, {"type": "boolean", "name": "match_not_eow", "help": "The escape sequence \"\\b\" does not match as an end-of-word."}, {"type": "boolean", "name": "match_any", "help": "Any match is acceptable if more than one match is possible."}, {"type": "boolean", "name": "match_not_null", "help": "Empty sequences do not match."}, {"type": "boolean", "name": "match_continuous", "help": "The expression must match a sub-sequence that begins at the first character. Sub-sequences must begin at the first character to match."}, {"type": "boolean", "name": "match_prev_avail", "help": "One or more characters exist before the first one. (match_not_bol and match_not_bow are ignored)"}], "title": "C++ 11 Regex Match", "author": "regular.express", "description": "Testing C++ 11 regex_match function", "docker_image": "regexpress/cpp:11"}}, "c++11-search": {"name": "c++11-search", "parent": {"name": "c++", "info": {"website": "https://isocpp.org/", "icon": {"type": "devicon", "value": "cplusplus"}, "title": "C++", "description": "C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation."}}, "info": {"properties": [{"type": "hidden", "name": "test_type", "value": "search"}, {"type": "string", "name": "regex", "help": "Regular expression.", "example": "([A-Za-z]+)", "required": true}, {"type": "list", "name": "syntax_type", "help": "Grammer of regex. These member constants are aliases of the homonym constants under the std::regex_constants namespace.", "list": {"ECMAScript": "ECMAScript", "basic": "basic", "extended": "extended", "grep": "grep", "egrep": "egrep", "awk": "awk"}, "default": "ECMAScript"}, {"type": "boolean", "name": "icase", "help": "Regular expressions match without regard to case."}, {"type": "boolean", "name": "nosubs", "help": "The match_results structure will not contain sub-expression matches."}, {"type": "boolean", "name": "optimize", "help": "Matching efficiency is preferred over efficiency constructing regex objects."}, {"type": "boolean", "name": "collate", "help": "Character ranges, like \"[a-b]\", are affected by locale."}, {"type": "boolean", "name": "match_not_bol", "help": "The first character is not considered a beginning of line (\"^\" does not match)."}, {"type": "boolean", "name": "match_not_eol", "help": "The last character is not considered an end of line (\"$\" does not match)."}, {"type": "boolean", "name": "match_not_bow", "help": "The escape sequence \"\\b\" does not match as a beginning-of-word."}, {"type": "boolean", "name": "match_not_eow", "help": "The escape sequence \"\\b\" does not match as an end-of-word."}, {"type": "boolean", "name": "match_any", "help": "Any match is acceptable if more than one match is possible."}, {"type": "boolean", "name": "match_not_null", "help": "Empty sequences do not match."}, {"type": "boolean", "name": "match_continuous", "help": "The expression must match a sub-sequence that begins at the first character. Sub-sequences must begin at the first character to match."}, {"type": "boolean", "name": "match_prev_avail", "help": "One or more characters exist before the first one. (match_not_bol and match_not_bow are ignored)"}], "title": "C++ 11 Regex Search", "author": "regular.express", "description": "Testing C++ 11 regex_search function", "docker_image": "regexpress/cpp:11"}}, "c++11-replace": {"name": "c++11-replace", "parent": {"name": "c++", "info": {"website": "https://isocpp.org/", "icon": {"type": "devicon", "value": "cplusplus"}, "title": "C++", "description": "C++ is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation."}}, "info": {"properties": [{"name": "test_type", "type": "hidden", "value": "replace"}, {"name": "regex", "type": "string", "help": "Regular expression.", "example": "([A-Za-z]+)", "required": true}, {"name": "replace", "type": "string", "help": "Replace string.", "example": "$1!"}, {"name": "syntax_type", "type": "list", "help": "Grammer of regex. These member constants are aliases of the homonym constants under the std::regex_constants namespace.", "list": {"ECMAScript": "ECMAScript", "basic": "basic", "extended": "extended", "grep": "grep", "egrep": "egrep", "awk": "awk"}, "default": "ECMAScript"}, {"name": "match_not_bol", "type": "boolean", "help": "The first character is not considered a beginning of line (\"^\" does not match)."}, {"name": "match_not_eol", "type": "boolean", "help": "The last character is not considered an end of line (\"$\" does not match)."}, {"name": "match_not_bow", "type": "boolean", "help": "The escape sequence \"\\b\" does not match as a beginning-of-word."}, {"name": "match_not_eow", "type": "boolean", "help": "The escape sequence \"\\b\" does not match as an end-of-word."}, {"name": "match_any", "type": "boolean", "help": "Any match is acceptable if more than one match is possible."}, {"name": "match_not_null", "type": "boolean", "help": "Empty sequences do not match."}, {"name": "match_continuous", "type": "boolean", "help": "The expression must match a sub-sequence that begins at the first character. Sub-sequences must begin at the first character to match."}, {"name": "match_prev_avail", "type": "boolean", "help": "One or more characters exist before the first one. (match_not_bol and match_not_bow are ignored)"}, {"name": "format_sed", "type": "boolean", "help": "Uses the same rules as the sed utility in POSIX to replace matches."}, {"name": "format_no_copy", "type": "boolean", "help": "The sections in the target sequence that do not match the regular expression are not copied when replacing matches."}, {"name": "format_first_only", "type": "boolean", "help": "Only the first occurrence of a regular expression is replaced."}], "title": "C++ 11 Regex Replace", "docker_image": "regexpress/cpp:11", "description": "Testing C++ 11 regex_replace function", "author": "regular.express"}}}}, "flume": {"name": "flume", "info": {"website": "https://hive.apache.org/", "icon": {"type": "devicon", "value": "apache"}, "title": "Apache Flume", "description": "Apache Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data. "}, "children": {"flume1.6-filtering": {"name": "flume1.6-filtering", "parent": {"name": "flume", "info": {"website": "https://hive.apache.org/", "icon": {"type": "devicon", "value": "apache"}, "title": "Apache Flume", "description": "Apache Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data. "}}, "info": {"docker_image": "regexpress/flume:1.6.0", "properties": [{"type": "hidden", "name": "test_type", "value": "filtering"}, {"type": "string", "name": "regex", "help": "Regular expression for matching excluded events. (default is \".*\")", "example": "(0[0-9]{2})-([0-9]{3,4})-([0-9]{3,4})", "required": true}, {"type": "boolean", "name": "excludeEvents", "help": "If true, a regex match determines events to exclude, otherwise a regex determines events to include.", "required": false}], "title": "Flume Regex Filtering Interceptor", "description": "Testing flume regex filtering interceptor", "author": "regular.express"}}, "flume1.6-replace": {"name": "flume1.6-replace", "parent": {"name": "flume", "info": {"website": "https://hive.apache.org/", "icon": {"type": "devicon", "value": "apache"}, "title": "Apache Flume", "description": "Apache Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data. "}}, "info": {"docker_image": "regexpress/flume:1.6.0", "properties": [{"type": "hidden", "name": "test_type", "value": "replace"}, {"type": "string", "name": "searchPattern", "help": "Regular expression for replacement.", "example": "([a-zA-Z]*) ([a-zA-Z]*) ([a-zA-Z]*)", "required": true}, {"type": "string", "name": "replaceString", "help": "The replacement string.", "example": "$1! $2! $3!", "required": false}, {"type": "string", "name": "charset", "help": "For using the specified charset.", "required": false}], "title": "Flume Regex SearchAndReplace Interceptor", "description": "Testing flume regex SearchAndReplace interceptor", "author": "regular.express"}}, "flume1.6-extractor": {"name": "flume1.6-extractor", "parent": {"name": "flume", "info": {"website": "https://hive.apache.org/", "icon": {"type": "devicon", "value": "apache"}, "title": "Apache Flume", "description": "Apache Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data. "}}, "info": {"docker_image": "regexpress/flume:1.6.0", "properties": [{"type": "hidden", "name": "test_type", "value": "extractor"}, {"type": "string", "name": "flume_context", "help": "Flume serializers config string for regex extractor.", "example": "regex = (\\d):(\\d):(\\d)\nserializers = s1 s2 s3\nserializers.s1.name = one\nserializers.s2.name = two\nserializers.s3.name = three", "required": true}], "title": "Flume Regex Extractor Interceptor", "description": "Testing flume regex extractor interceptor", "author": "regular.express"}}}}, "php": {"name": "php", "info": {"website": "https://php.net/", "icon": {"type": "devicon", "value": "php"}, "title": "PHP", "description": "PHP is a server-side scripting language designed primarily for web development but also used as a general-purpose programming language. "}, "children": {"php5.6-split": {"name": "php5.6-split", "parent": {"name": "php", "info": {"website": "https://php.net/", "icon": {"type": "devicon", "value": "php"}, "title": "PHP", "description": "PHP is a server-side scripting language designed primarily for web development but also used as a general-purpose programming language. "}}, "info": {"docker_image": "regexpress/php:5.6", "properties": [{"type": "hidden", "name": "test_type", "value": "split"}, {"type": "string", "name": "regex", "help": "Regular Expression. Don't add flags after regex.", "example": "/-/", "required": true}, {"type": "boolean", "name": "PCRE_CASELESS", "help": "If this modifier is set, letters in the pattern match both upper and lower case letters."}, {"type": "boolean", "name": "PCRE_MULTILINE", "help": "By default, PCRE treats the subject string as consisting of a single \"line\" of characters (even if it actually contains several newlines). The \"start of line\" metacharacter (^) matches only at the start of the string, while the \"end of line\" metacharacter ($) matches only at the end of the string, or before a terminating newline (unless D modifier is set). This is the same as Perl. When this modifier is set, the \"start of line\" and \"end of line\" constructs match immediately following or immediately before any newline in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl's /m modifier. If there are no \"\n\" characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this modifier has no effect."}, {"type": "boolean", "name": "PCRE_DOTALL", "help": "If this modifier is set, a dot metacharacter in the pattern matches all characters, including newlines. Without it, newlines are excluded. This modifier is equivalent to Perl's /s modifier. A negative class such as [^a] always matches a newline character, independent of the setting of this modifier."}, {"type": "boolean", "name": "PCRE_EXTENDED", "help": "If this modifier is set, whitespace data characters in the pattern are totally ignored except when escaped or inside a character class, and characters between an unescaped # outside a character class and the next newline character, inclusive, are also ignored. This is equivalent to Perl's /x modifier, and makes it possible to include commentary inside complicated patterns. Note, however, that this applies only to data characters. Whitespace characters may never appear within special character sequences in a pattern, for example within the sequence (?( which introduces a conditional subpattern."}, {"type": "boolean", "name": "PCRE_ANCHORED", "help": "If this modifier is set, the pattern is forced to be \"anchored\", that is, it is constrained to match only at the start of the string which is being searched (the \"subject string\"). This effect can also be achieved by appropriate constructs in the pattern itself, which is the only way to do it in Perl."}, {"type": "boolean", "name": "PCRE_DOLLAR_ENDONLY", "help": "If this modifier is set, a dollar metacharacter in the pattern matches only at the end of the subject string. Without this modifier, a dollar also matches immediately before the final character if it is a newline (but not before any other newlines). This modifier is ignored if m modifier is set. There is no equivalent to this modifier in Perl."}, {"type": "boolean", "name": "S", "help": "When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching. If this modifier is set, then this extra analysis is performed. At present, studying a pattern is useful only for non-anchored patterns that do not have a single fixed starting character."}, {"type": "boolean", "name": "PCRE_UNGREEDY", "help": "This modifier inverts the \"greediness\" of the quantifiers so that they are not greedy by default, but become greedy if followed by ?. It is not compatible with Perl. It can also be set by a (?U) modifier setting within the pattern or by a question mark behind a quantifier (e.g. .*?)."}, {"type": "boolean", "name": "PCRE_EXTRA", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Any backslash in a pattern that is followed by a letter that has no special meaning causes an error, thus reserving these combinations for future expansion. By default, as in Perl, a backslash followed by a letter with no special meaning is treated as a literal. There are at present no other features controlled by this modifier."}, {"type": "boolean", "name": "PCRE_INFO_JCHANGED", "help": "The (?J) internal option setting changes the local PCRE_DUPNAMES option. Allow duplicate names for subpatterns."}, {"type": "boolean", "name": "PCRE_UTF8", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Pattern and subject strings are treated as UTF-8. This modifier is available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on win32. UTF-8 validity of the pattern and the subject is checked since PHP 4.3.5. An invalid subject will cause the preg_* function to match nothing; an invalid pattern will trigger an error of level E_WARNING. Five and six octet UTF-8 sequences are regarded as invalid since PHP 5.3.4 (resp. PCRE 7.3 2007-08-28); formerly those have been regarded as valid UTF-8."}], "title": "PHP (PCRE) regex split", "description": "Testing PHP (PCRE) preg_split function.", "author": "regular.express"}}, "php5.6-grep": {"name": "php5.6-grep", "parent": {"name": "php", "info": {"website": "https://php.net/", "icon": {"type": "devicon", "value": "php"}, "title": "PHP", "description": "PHP is a server-side scripting language designed primarily for web development but also used as a general-purpose programming language. "}}, "info": {"docker_image": "regexpress/php:5.6", "properties": [{"type": "hidden", "name": "test_type", "value": "grep"}, {"type": "string", "name": "regex", "help": "Regular Expression. Don't add flags after regex.", "example": "/!/", "required": true}, {"type": "boolean", "name": "PCRE_CASELESS", "help": "If this modifier is set, letters in the pattern match both upper and lower case letters."}, {"type": "boolean", "name": "PCRE_MULTILINE", "help": "By default, PCRE treats the subject string as consisting of a single \"line\" of characters (even if it actually contains several newlines). The \"start of line\" metacharacter (^) matches only at the start of the string, while the \"end of line\" metacharacter ($) matches only at the end of the string, or before a terminating newline (unless D modifier is set). This is the same as Perl. When this modifier is set, the \"start of line\" and \"end of line\" constructs match immediately following or immediately before any newline in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl's /m modifier. If there are no \"\n\" characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this modifier has no effect."}, {"type": "boolean", "name": "PCRE_DOTALL", "help": "If this modifier is set, a dot metacharacter in the pattern matches all characters, including newlines. Without it, newlines are excluded. This modifier is equivalent to Perl's /s modifier. A negative class such as [^a] always matches a newline character, independent of the setting of this modifier."}, {"type": "boolean", "name": "PCRE_EXTENDED", "help": "If this modifier is set, whitespace data characters in the pattern are totally ignored except when escaped or inside a character class, and characters between an unescaped # outside a character class and the next newline character, inclusive, are also ignored. This is equivalent to Perl's /x modifier, and makes it possible to include commentary inside complicated patterns. Note, however, that this applies only to data characters. Whitespace characters may never appear within special character sequences in a pattern, for example within the sequence (?( which introduces a conditional subpattern."}, {"type": "boolean", "name": "PCRE_ANCHORED", "help": "If this modifier is set, the pattern is forced to be \"anchored\", that is, it is constrained to match only at the start of the string which is being searched (the \"subject string\"). This effect can also be achieved by appropriate constructs in the pattern itself, which is the only way to do it in Perl."}, {"type": "boolean", "name": "PCRE_DOLLAR_ENDONLY", "help": "If this modifier is set, a dollar metacharacter in the pattern matches only at the end of the subject string. Without this modifier, a dollar also matches immediately before the final character if it is a newline (but not before any other newlines). This modifier is ignored if m modifier is set. There is no equivalent to this modifier in Perl."}, {"type": "boolean", "name": "S", "help": "When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching. If this modifier is set, then this extra analysis is performed. At present, studying a pattern is useful only for non-anchored patterns that do not have a single fixed starting character."}, {"type": "boolean", "name": "PCRE_UNGREEDY", "help": "This modifier inverts the \"greediness\" of the quantifiers so that they are not greedy by default, but become greedy if followed by ?. It is not compatible with Perl. It can also be set by a (?U) modifier setting within the pattern or by a question mark behind a quantifier (e.g. .*?)."}, {"type": "boolean", "name": "PCRE_EXTRA", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Any backslash in a pattern that is followed by a letter that has no special meaning causes an error, thus reserving these combinations for future expansion. By default, as in Perl, a backslash followed by a letter with no special meaning is treated as a literal. There are at present no other features controlled by this modifier."}, {"type": "boolean", "name": "PCRE_INFO_JCHANGED", "help": "The (?J) internal option setting changes the local PCRE_DUPNAMES option. Allow duplicate names for subpatterns."}, {"type": "boolean", "name": "PCRE_UTF8", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Pattern and subject strings are treated as UTF-8. This modifier is available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on win32. UTF-8 validity of the pattern and the subject is checked since PHP 4.3.5. An invalid subject will cause the preg_* function to match nothing; an invalid pattern will trigger an error of level E_WARNING. Five and six octet UTF-8 sequences are regarded as invalid since PHP 5.3.4 (resp. PCRE 7.3 2007-08-28); formerly those have been regarded as valid UTF-8."}], "title": "PHP (PCRE) regex grep", "description": "Testing PHP (PCRE) preg_grep function.", "author": "regular.express"}}, "php5.6-matchall": {"name": "php5.6-matchall", "parent": {"name": "php", "info": {"website": "https://php.net/", "icon": {"type": "devicon", "value": "php"}, "title": "PHP", "description": "PHP is a server-side scripting language designed primarily for web development but also used as a general-purpose programming language. "}}, "info": {"docker_image": "regexpress/php:5.6", "properties": [{"type": "hidden", "name": "test_type", "value": "matchall"}, {"type": "string", "name": "regex", "help": "Regular Expression. Don't add flags after regex.", "example": "/([A-Za-z]+)/", "required": true}, {"type": "boolean", "name": "PCRE_CASELESS", "help": "If this modifier is set, letters in the pattern match both upper and lower case letters."}, {"type": "boolean", "name": "PCRE_MULTILINE", "help": "By default, PCRE treats the subject string as consisting of a single \"line\" of characters (even if it actually contains several newlines). The \"start of line\" metacharacter (^) matches only at the start of the string, while the \"end of line\" metacharacter ($) matches only at the end of the string, or before a terminating newline (unless D modifier is set). This is the same as Perl. When this modifier is set, the \"start of line\" and \"end of line\" constructs match immediately following or immediately before any newline in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl's /m modifier. If there are no \"\n\" characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this modifier has no effect."}, {"type": "boolean", "name": "PCRE_DOTALL", "help": "If this modifier is set, a dot metacharacter in the pattern matches all characters, including newlines. Without it, newlines are excluded. This modifier is equivalent to Perl's /s modifier. A negative class such as [^a] always matches a newline character, independent of the setting of this modifier."}, {"type": "boolean", "name": "PCRE_EXTENDED", "help": "If this modifier is set, whitespace data characters in the pattern are totally ignored except when escaped or inside a character class, and characters between an unescaped # outside a character class and the next newline character, inclusive, are also ignored. This is equivalent to Perl's /x modifier, and makes it possible to include commentary inside complicated patterns. Note, however, that this applies only to data characters. Whitespace characters may never appear within special character sequences in a pattern, for example within the sequence (?( which introduces a conditional subpattern."}, {"type": "boolean", "name": "PCRE_ANCHORED", "help": "If this modifier is set, the pattern is forced to be \"anchored\", that is, it is constrained to match only at the start of the string which is being searched (the \"subject string\"). This effect can also be achieved by appropriate constructs in the pattern itself, which is the only way to do it in Perl."}, {"type": "boolean", "name": "PCRE_DOLLAR_ENDONLY", "help": "If this modifier is set, a dollar metacharacter in the pattern matches only at the end of the subject string. Without this modifier, a dollar also matches immediately before the final character if it is a newline (but not before any other newlines). This modifier is ignored if m modifier is set. There is no equivalent to this modifier in Perl."}, {"type": "boolean", "name": "S", "help": "When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching. If this modifier is set, then this extra analysis is performed. At present, studying a pattern is useful only for non-anchored patterns that do not have a single fixed starting character."}, {"type": "boolean", "name": "PCRE_UNGREEDY", "help": "This modifier inverts the \"greediness\" of the quantifiers so that they are not greedy by default, but become greedy if followed by ?. It is not compatible with Perl. It can also be set by a (?U) modifier setting within the pattern or by a question mark behind a quantifier (e.g. .*?)."}, {"type": "boolean", "name": "PCRE_EXTRA", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Any backslash in a pattern that is followed by a letter that has no special meaning causes an error, thus reserving these combinations for future expansion. By default, as in Perl, a backslash followed by a letter with no special meaning is treated as a literal. There are at present no other features controlled by this modifier."}, {"type": "boolean", "name": "PCRE_INFO_JCHANGED", "help": "The (?J) internal option setting changes the local PCRE_DUPNAMES option. Allow duplicate names for subpatterns."}, {"type": "boolean", "name": "PCRE_UTF8", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Pattern and subject strings are treated as UTF-8. This modifier is available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on win32. UTF-8 validity of the pattern and the subject is checked since PHP 4.3.5. An invalid subject will cause the preg_* function to match nothing; an invalid pattern will trigger an error of level E_WARNING. Five and six octet UTF-8 sequences are regarded as invalid since PHP 5.3.4 (resp. PCRE 7.3 2007-08-28); formerly those have been regarded as valid UTF-8."}], "title": "PHP (PCRE) regex matchall", "description": "Testing PHP (PCRE) preg_match_all function.", "author": "regular.express"}}, "php5.6-replace": {"name": "php5.6-replace", "parent": {"name": "php", "info": {"website": "https://php.net/", "icon": {"type": "devicon", "value": "php"}, "title": "PHP", "description": "PHP is a server-side scripting language designed primarily for web development but also used as a general-purpose programming language. "}}, "info": {"docker_image": "regexpress/php:5.6", "properties": [{"type": "hidden", "name": "test_type", "value": "replace"}, {"type": "string", "name": "regex", "help": "Regular Expression. Don't add flags after regex.", "example": "/([A-Z])/", "required": true}, {"type": "string", "name": "replace", "help": "Replace string.", "example": "$1_"}, {"type": "boolean", "name": "PCRE_CASELESS", "help": "If this modifier is set, letters in the pattern match both upper and lower case letters."}, {"type": "boolean", "name": "PCRE_MULTILINE", "help": "By default, PCRE treats the subject string as consisting of a single \"line\" of characters (even if it actually contains several newlines). The \"start of line\" metacharacter (^) matches only at the start of the string, while the \"end of line\" metacharacter ($) matches only at the end of the string, or before a terminating newline (unless D modifier is set). This is the same as Perl. When this modifier is set, the \"start of line\" and \"end of line\" constructs match immediately following or immediately before any newline in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl's /m modifier. If there are no \"\n\" characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this modifier has no effect."}, {"type": "boolean", "name": "PCRE_DOTALL", "help": "If this modifier is set, a dot metacharacter in the pattern matches all characters, including newlines. Without it, newlines are excluded. This modifier is equivalent to Perl's /s modifier. A negative class such as [^a] always matches a newline character, independent of the setting of this modifier."}, {"type": "boolean", "name": "PCRE_EXTENDED", "help": "If this modifier is set, whitespace data characters in the pattern are totally ignored except when escaped or inside a character class, and characters between an unescaped # outside a character class and the next newline character, inclusive, are also ignored. This is equivalent to Perl's /x modifier, and makes it possible to include commentary inside complicated patterns. Note, however, that this applies only to data characters. Whitespace characters may never appear within special character sequences in a pattern, for example within the sequence (?( which introduces a conditional subpattern."}, {"type": "boolean", "name": "PCRE_ANCHORED", "help": "If this modifier is set, the pattern is forced to be \"anchored\", that is, it is constrained to match only at the start of the string which is being searched (the \"subject string\"). This effect can also be achieved by appropriate constructs in the pattern itself, which is the only way to do it in Perl."}, {"type": "boolean", "name": "PCRE_DOLLAR_ENDONLY", "help": "If this modifier is set, a dollar metacharacter in the pattern matches only at the end of the subject string. Without this modifier, a dollar also matches immediately before the final character if it is a newline (but not before any other newlines). This modifier is ignored if m modifier is set. There is no equivalent to this modifier in Perl."}, {"type": "boolean", "name": "S", "help": "When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching. If this modifier is set, then this extra analysis is performed. At present, studying a pattern is useful only for non-anchored patterns that do not have a single fixed starting character."}, {"type": "boolean", "name": "PCRE_UNGREEDY", "help": "This modifier inverts the \"greediness\" of the quantifiers so that they are not greedy by default, but become greedy if followed by ?. It is not compatible with Perl. It can also be set by a (?U) modifier setting within the pattern or by a question mark behind a quantifier (e.g. .*?)."}, {"type": "boolean", "name": "PCRE_EXTRA", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Any backslash in a pattern that is followed by a letter that has no special meaning causes an error, thus reserving these combinations for future expansion. By default, as in Perl, a backslash followed by a letter with no special meaning is treated as a literal. There are at present no other features controlled by this modifier."}, {"type": "boolean", "name": "PCRE_INFO_JCHANGED", "help": "The (?J) internal option setting changes the local PCRE_DUPNAMES option. Allow duplicate names for subpatterns."}, {"type": "boolean", "name": "PCRE_UTF8", "help": "This modifier turns on additional functionality of PCRE that is incompatible with Perl. Pattern and subject strings are treated as UTF-8. This modifier is available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on win32. UTF-8 validity of the pattern and the subject is checked since PHP 4.3.5. An invalid subject will cause the preg_* function to match nothing; an invalid pattern will trigger an error of level E_WARNING. Five and six octet UTF-8 sequences are regarded as invalid since PHP 5.3.4 (resp. PCRE 7.3 2007-08-28); formerly those have been regarded as valid UTF-8."}], "title": "PHP (PCRE) regex replace", "description": "Testing PHP (PCRE) preg_replace function.", "author": "regular.express"}}}}, "python": {"name": "python", "info": {"website": "https://www.python.org/", "icon": {"type": "devicon", "value": "python"}, "title": "Python", "description": "programming language that lets you work quickly and integrate systems more effectively"}, "children": {"python3-findall": {"name": "python3-findall", "parent": {"name": "python", "info": {"website": "https://www.python.org/", "icon": {"type": "devicon", "value": "python"}, "title": "Python", "description": "programming language that lets you work quickly and integrate systems more effectively"}}, "info": {"docker_image": "regexpress/python:3", "properties": [{"type": "hidden", "name": "test_type", "value": "findall"}, {"type": "string", "name": "regex", "help": "Regular Expression.", "example": "([A-Z])", "required": true}, {"type": "boolean", "name": "IGNORECASE", "help": "Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too."}, {"type": "boolean", "name": "LOCALE", "help": "Make \\w, \\W, \\b, \\B, \\s and \\S dependent on the current locale."}, {"type": "boolean", "name": "MULTILINE", "help": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string."}, {"type": "boolean", "name": "DOTALL", "help": "Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline."}, {"type": "boolean", "name": "ASCII", "help": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching."}, {"type": "boolean", "name": "VERBOSE", "help": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class or when preceded by an unescaped backslash. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored."}], "title": "Python3 regex findall", "description": "Testing python3 regex findall", "author": "regular.express"}}, "python3-replace": {"name": "python3-replace", "parent": {"name": "python", "info": {"website": "https://www.python.org/", "icon": {"type": "devicon", "value": "python"}, "title": "Python", "description": "programming language that lets you work quickly and integrate systems more effectively"}}, "info": {"docker_image": "regexpress/python:3", "properties": [{"type": "hidden", "name": "test_type", "value": "replace"}, {"type": "string", "name": "regex", "help": "Regular Expression.", "example": "([A-Z])", "required": true}, {"type": "string", "name": "replace", "help": "Replace string.", "example": "\\1_"}, {"type": "boolean", "name": "IGNORECASE", "help": "Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too."}, {"type": "boolean", "name": "LOCALE", "help": "Make \\w, \\W, \\b, \\B, \\s and \\S dependent on the current locale."}, {"type": "boolean", "name": "MULTILINE", "help": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string."}, {"type": "boolean", "name": "DOTALL", "help": "Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline."}, {"type": "boolean", "name": "ASCII", "help": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching."}, {"type": "boolean", "name": "VERBOSE", "help": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class or when preceded by an unescaped backslash. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored."}], "title": "Python3 regex replace", "description": "Testing python3 regex replace", "author": "regular.express"}}, "python3-group": {"name": "python3-group", "parent": {"name": "python", "info": {"website": "https://www.python.org/", "icon": {"type": "devicon", "value": "python"}, "title": "Python", "description": "programming language that lets you work quickly and integrate systems more effectively"}}, "info": {"docker_image": "regexpress/python:3", "properties": [{"type": "hidden", "name": "test_type", "value": "group"}, {"type": "string", "name": "regex", "help": "Regular expression.", "example": "([A-Za-z]*)", "required": true}, {"type": "boolean", "name": "IGNORECASE", "help": "Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too."}, {"type": "boolean", "name": "LOCALE", "help": "Make \\w, \\W, \\b, \\B, \\s and \\S dependent on the current locale."}, {"type": "boolean", "name": "MULTILINE", "help": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string."}, {"type": "boolean", "name": "DOTALL", "help": "Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline."}, {"type": "boolean", "name": "ASCII", "help": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching."}, {"type": "boolean", "name": "VERBOSE", "help": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class or when preceded by an unescaped backslash. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored."}], "title": "Python3 regex group", "description": "Testing python3 regex group", "author": "regular.express"}}, "python3-match": {"name": "python3-match", "parent": {"name": "python", "info": {"website": "https://www.python.org/", "icon": {"type": "devicon", "value": "python"}, "title": "Python", "description": "programming language that lets you work quickly and integrate systems more effectively"}}, "info": {"docker_image": "regexpress/python:3", "properties": [{"type": "hidden", "name": "test_type", "value": "match"}, {"type": "string", "name": "regex", "help": "Regular Expression.", "example": "([A-Z])", "required": true}, {"type": "string", "name": "replace", "help": "Replace string."}, {"type": "boolean", "name": "IGNORECASE", "help": "Perform case-insensitive matching; expressions like [A-Z] will match lowercase letters, too."}, {"type": "boolean", "name": "LOCALE", "help": "Make \\w, \\W, \\b, \\B, \\s and \\S dependent on the current locale."}, {"type": "boolean", "name": "MULTILINE", "help": "When specified, the pattern character '^' matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character '$' matches at the end of the string and at the end of each line (immediately preceding each newline). By default, '^' matches only at the beginning of the string, and '$' only at the end of the string and immediately before the newline (if any) at the end of the string."}, {"type": "boolean", "name": "DOTALL", "help": "Make the '.' special character match any character at all, including a newline; without this flag, '.' will match anything except a newline."}, {"type": "boolean", "name": "ASCII", "help": "Make \\w, \\W, \\b, \\B, \\d, \\D, \\s and \\S perform ASCII-only matching instead of full Unicode matching."}, {"type": "boolean", "name": "VERBOSE", "help": "This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class or when preceded by an unescaped backslash. When a line contains a # that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such # through the end of the line are ignored."}], "title": "Python3 regex match", "description": "Testing python3 regex match", "author": "regular.express"}}}}, "hive": {"name": "hive", "info": {"website": "https://hive.apache.org/", "icon": {"type": "devicon", "value": "apache"}, "title": "Apache Hive", "description": "Apache Hive is a data warehouse infrastructure built on top of Hadoop for providing data summarization, query, and analysis."}, "children": {"hive2.10-serde": {"name": "hive2.10-serde", "parent": {"name": "hive", "info": {"website": "https://hive.apache.org/", "icon": {"type": "devicon", "value": "apache"}, "title": "Apache Hive", "description": "Apache Hive is a data warehouse infrastructure built on top of Hadoop for providing data summarization, query, and analysis."}}, "info": {"docker_image": "regexpress/hive:2.10", "properties": [{"type": "string", "name": "input.regex", "help": "Regex string.", "example": "(0[0-9]{2})-([0-9]{3,4})-([0-9]{3,4})", "required": true}, {"type": "string", "name": "columns", "help": "Whitepsace seperated column list.", "example": "A,B,C", "required": true}, {"type": "string", "name": "columns.types", "help": "Comma seperated column type list.", "example": "STRING,STRING,STRING", "required": true}, {"type": "boolean", "help": "Determine regex case insensitive.", "example": "", "default": false, "name": "input.regex.case.insensitive", "required": false}], "title": "Hive 2 Regex SerDe", "description": "Testing hive 2.10 regex serde", "author": "regular.express"}}}}, "java": {"name": "java", "info": {"website": "https://www.java.com", "icon": {"type": "devicon", "value": "java"}, "title": "Java", "description": "programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible"}, "children": {"oraclejdk8-match": {"name": "oraclejdk8-match", "parent": {"name": "java", "info": {"website": "https://www.java.com", "icon": {"type": "devicon", "value": "java"}, "title": "Java", "description": "programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible"}}, "info": {"docker_image": "regexpress/java:1.8", "properties": [{"type": "hidden", "name": "test_type", "value": "match"}, {"type": "string", "name": "regex", "help": "Regex string.", "example": "(0[0-9]{2})-([0-9]{3,4})-([0-9]{3,4})", "required": true}, {"type": "boolean", "name": "CANON_EQ", "help": "Force canonical equivalence", "required": false}, {"type": "boolean", "name": "CASE_INSENSITIVE", "help": "Case insensitive", "required": false}, {"type": "boolean", "name": "COMMENTS", "help": "Allow comments in regex", "required": false}, {"type": "boolean", "name": "DOTALL", "help": "Dot matches line terminator", "required": false}, {"type": "boolean", "name": "LITERAL", "help": "Treat as a sequence of literal characters", "required": false}, {"type": "boolean", "name": "MULTILINE", "help": "^ and $ match EOL", "required": false}, {"type": "boolean", "name": "UNICODE_CASE", "help": "Unicode case matching", "required": false}, {"type": "boolean", "name": "UNIX_LINES", "help": "Only consider '\n' as line terminator", "required": false}, {"type": "boolean", "name": "UNICODE_CHARACTER_CLASS", "help": "Enables the Unicode version of Predefined character classes and * POSIX character classes", "required": false}], "title": "Oracle Java 8 Regex Match", "description": "Testing oracle java 8 regular expression for string match.", "author": "regular.express"}}, "oraclejdk8-group": {"name": "oraclejdk8-group", "parent": {"name": "java", "info": {"website": "https://www.java.com", "icon": {"type": "devicon", "value": "java"}, "title": "Java", "description": "programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible"}}, "info": {"docker_image": "regexpress/java:1.8", "properties": [{"type": "hidden", "name": "test_type", "value": "group"}, {"type": "string", "name": "regex", "help": "Regex string.", "example": "(0[0-9]{2})-([0-9]{3,4})-([0-9]{3,4})", "required": true}, {"type": "boolean", "name": "CANON_EQ", "help": "Force canonical equivalence", "required": false}, {"type": "boolean", "name": "CASE_INSENSITIVE", "help": "Case insensitive", "required": false}, {"type": "boolean", "name": "COMMENTS", "help": "Allow comments in regex", "required": false}, {"type": "boolean", "name": "DOTALL", "help": "Dot matches line terminator", "required": false}, {"type": "boolean", "name": "LITERAL", "help": "Treat as a sequence of literal characters", "required": false}, {"type": "boolean", "name": "MULTILINE", "help": "^ and $ match EOL", "required": false}, {"type": "boolean", "name": "UNICODE_CASE", "help": "Unicode case matching", "required": false}, {"type": "boolean", "name": "UNIX_LINES", "help": "Only consider '\n' as line terminator", "required": false}, {"type": "boolean", "name": "UNICODE_CHARACTER_CLASS", "help": "Enables the Unicode version of Predefined character classes and * POSIX character classes", "required": false}], "title": "Oracle Java 8 Regex Group", "description": "Testing oracle java 8 regular expression for capturing group.", "author": "regular.express"}}, "oraclejdk8-replace": {"name": "oraclejdk8-replace", "parent": {"name": "java", "info": {"website": "https://www.java.com", "icon": {"type": "devicon", "value": "java"}, "title": "Java", "description": "programming language that is concurrent, class-based, object-oriented, and specifically designed to have as few implementation dependencies as possible"}}, "info": {"docker_image": "regexpress/java:1.8", "properties": [{"name": "test_type", "type": "hidden", "value": "replace"}, {"name": "regex", "type": "string", "help": "Regex string.", "example": "(0[0-9]{2})-([0-9]{3,4})-([0-9]{3,4})", "required": true}, {"name": "replace", "type": "string", "help": "Replace string.", "example": "$1 $2 $3"}, {"name": "CANON_EQ", "type": "boolean", "help": "Force canonical equivalence", "required": false}, {"name": "CASE_INSENSITIVE", "type": "boolean", "help": "Case insensitive", "required": false}, {"name": "COMMENTS", "type": "boolean", "help": "Allow comments in regex", "required": false}, {"name": "DOTALL", "type": "boolean", "help": "Dot matches line terminator", "required": false}, {"name": "LITERAL", "type": "boolean", "help": "Treat as a sequence of literal characters", "required": false}, {"name": "MULTILINE", "type": "boolean", "help": "^ and $ match EOL", "required": false}, {"name": "UNICODE_CASE", "type": "boolean", "help": "Unicode case matching", "required": false}, {"name": "UNIX_LINES", "type": "boolean", "help": "Only consider '\n' as line terminator", "required": false}, {"name": "UNICODE_CHARACTER_CLASS", "type": "boolean", "help": "Enables the Unicode version of Predefined character classes and * POSIX character classes", "required": false}], "title": "Oracle Java 8 Regex Replace", "description": "Testing oracle java 8 regular expression for string replace.", "author": "regular.express"}}}}, "nodejs": {"name": "nodejs", "info": {"website": "https://nodejs.org/", "icon": {"type": "devicon", "value": "nodejs"}, "title": "NodeJS", "description": "Node.js is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of tools and applications."}, "children": {"nodejs6.7.0-replace": {"name": "nodejs6.7.0-replace", "parent": {"name": "nodejs", "info": {"website": "https://nodejs.org/", "icon": {"type": "devicon", "value": "nodejs"}, "title": "NodeJS", "description": "Node.js is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of tools and applications."}}, "info": {"properties": [{"type": "hidden", "name": "test_type", "value": "replace"}, {"type": "string", "name": "regex", "example": "([A-Za-z]*)", "help": "Regular Expression.", "required": true}, {"type": "string", "name": "replace", "example": "$1!", "help": "Replace string."}, {"type": "boolean", "name": "global", "help": "find all matches rather than stopping after the first match"}, {"type": "boolean", "name": "ignore", "help": "ignore case"}, {"type": "boolean", "name": "multiline", "help": "treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the very beginning or end of the whole input string)"}, {"type": "boolean", "name": "unicode", "help": "treat pattern as a sequence of unicode code points"}, {"type": "boolean", "name": "sticky", "help": "matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes)."}], "title": "NodeJS 6.7.0 regex replace", "author": "regular.express", "description": "Testing nodejs regex replace", "docker_image": "regexpress/nodejs:6.7.0"}}, "nodejs6.7.0-group": {"name": "nodejs6.7.0-group", "parent": {"name": "nodejs", "info": {"website": "https://nodejs.org/", "icon": {"type": "devicon", "value": "nodejs"}, "title": "NodeJS", "description": "Node.js is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of tools and applications."}}, "info": {"properties": [{"type": "hidden", "name": "test_type", "value": "group"}, {"type": "string", "name": "regex", "example": "([A-Za-z]*)", "help": "Regular Expression.", "required": true}, {"type": "boolean", "name": "global", "help": "find all matches rather than stopping after the first match"}, {"type": "boolean", "name": "ignore", "help": "ignore case"}, {"type": "boolean", "name": "multiline", "help": "treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the very beginning or end of the whole input string)"}, {"type": "boolean", "name": "unicode", "help": "treat pattern as a sequence of unicode code points"}, {"type": "boolean", "name": "sticky", "help": "matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes)."}], "title": "NodeJS 6.7.0 regex group", "author": "regular.express", "description": "Testing nodejs regex group", "docker_image": "regexpress/nodejs:6.7.0"}}, "nodejs6.7.0-match": {"name": "nodejs6.7.0-match", "parent": {"name": "nodejs", "info": {"website": "https://nodejs.org/", "icon": {"type": "devicon", "value": "nodejs"}, "title": "NodeJS", "description": "Node.js is an open-source, cross-platform JavaScript runtime environment for developing a diverse variety of tools and applications."}}, "info": {"properties": [{"type": "hidden", "name": "test_type", "value": "match"}, {"type": "string", "name": "regex", "example": "[A-Za-z]\\d", "help": "Regular Expression.", "required": true}, {"type": "boolean", "name": "global", "help": "find all matches rather than stopping after the first match"}, {"type": "boolean", "name": "ignore", "help": "ignore case"}, {"type": "boolean", "name": "multiline", "help": "treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \n or \r), not only the very beginning or end of the whole input string)"}, {"type": "boolean", "name": "unicode", "help": "treat pattern as a sequence of unicode code points"}, {"type": "boolean", "name": "sticky", "help": "matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes)."}], "title": "NodeJS 6.7.0 regex match", "author": "regular.express", "description": "Testing nodejs regex match", "docker_image": "regexpress/nodejs:6.7.0"}}}}, "nginx": {"name": "nginx", "info": {"website": "http://nginx.org/", "icon": {"type": "devicon", "value": "nginx"}, "title": "Nginx", "description": "Nginx (pronounced \"engine x\") is software to provide a web server."}, "children": {"nginx1.10-rewrite": {"name": "nginx1.10-rewrite", "parent": {"name": "nginx", "info": {"website": "http://nginx.org/", "icon": {"type": "devicon", "value": "nginx"}, "title": "Nginx", "description": "Nginx (pronounced \"engine x\") is software to provide a web server."}}, "info": {"docker_image": "regexpress/nginx:1.10", "properties": [{"type": "string", "name": "config", "help": "Nginx location config.", "example": "location / {\nrewrite ^/v/(.*)$ /index.html?q=$1;\n}", "required": true}], "title": "Nginx 1.10 Rewrite Rule Test", "description": "Testing Nginx rewrite rule config.", "author": "regular.express"}}}}}